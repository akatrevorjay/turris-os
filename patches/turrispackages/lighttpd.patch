diff --git a/net/lighttpd/Makefile b/net/lighttpd/Makefile
index 7a9c91f..36f776a 100644
--- a/net/lighttpd/Makefile
+++ b/net/lighttpd/Makefile
@@ -8,12 +8,12 @@
 include $(TOPDIR)/rules.mk
 
 PKG_NAME:=lighttpd
-PKG_VERSION:=1.4.39
-PKG_RELEASE:=2
+PKG_VERSION:=1.4.40
+PKG_RELEASE:=1
 
 PKG_SOURCE:=$(PKG_NAME)-$(PKG_VERSION).tar.xz
 PKG_SOURCE_URL:=http://download.lighttpd.net/lighttpd/releases-1.4.x
-PKG_MD5SUM:=63c7563be1c7a7a9819a51f07f1af8b2
+PKG_MD5SUM:=80450dfcf7604d6c516a00a0ce750937074ef844bbdee3b3f23384187b9d4f8d
 
 PKG_LICENSE:=BSD-3c
 PKG_LICENSE_FILES:=COPYING
diff --git a/net/lighttpd/patches/01-set-path.patch b/net/lighttpd/patches/01-set-path.patch
index 012efef..5b10551 100644
--- a/net/lighttpd/patches/01-set-path.patch
+++ b/net/lighttpd/patches/01-set-path.patch
@@ -1,14 +1,12 @@
---- a/src/mod_cgi.c.orig
+--- a/src/mod_cgi.c
 +++ b/src/mod_cgi.c
-@@ -958,6 +958,11 @@ static int cgi_create_env(server *srv, c
- 		force_assert(s);
- 		cgi_env_add(&env, CONST_STR_LEN("REQUEST_METHOD"), s, strlen(s));
- 
-+		s = getenv("PATH");
-+		if (s != NULL) {
+@@ -1135,6 +1135,9 @@ static int cgi_create_env(server *srv, c
+ 		if (NULL != (s = getenv("LD_LIBRARY_PATH"))) {
+ 			cgi_env_add(&env, CONST_STR_LEN("LD_LIBRARY_PATH"), s, strlen(s));
+ 		}
++		if (NULL != (s = getenv("PATH"))) {
 +			cgi_env_add(&env, CONST_STR_LEN("PATH"), s, strlen(s));
 +		}
-+
- 		if (!buffer_string_is_empty(con->request.pathinfo)) {
- 			cgi_env_add(&env, CONST_STR_LEN("PATH_INFO"), CONST_BUF_LEN(con->request.pathinfo));
- 		}
+ #ifdef __CYGWIN__
+ 		/* CYGWIN needs SYSTEMROOT */
+ 		if (NULL != (s = getenv("SYSTEMROOT"))) {
diff --git a/net/lighttpd/patches/proxy-sec-fix.patch b/net/lighttpd/patches/proxy-sec-fix.patch
deleted file mode 100644
index 4116125..0000000
--- a/net/lighttpd/patches/proxy-sec-fix.patch
+++ /dev/null
@@ -1,120 +0,0 @@
-From 779c133c16f9af168b004dce7a2a64f16c1cb3a4 Mon Sep 17 00:00:00 2001
-From: Glenn Strauss <gstrauss@gluelogic.com>
-Date: Mon, 18 Jul 2016 22:59:33 -0400
-Subject: [PATCH] [security] do not emit HTTP_PROXY to CGI env
-
-Strip bogus "Proxy" header before creating subprocess environment.
-(mod_cgi, mod_fastcgi, mod_scgi, mod_ssi, mod_proxy)
-
-Do not emit HTTP_PROXY to subprocess environment.
-Some executables use HTTP_PROXY to configure outgoing proxy.
-
-This is not a lighttpd security issue per se, but this change to
-lighttpd adds a layer of defense to protect backend processes which
-might be vulnerable due to blindly using this untrusted environment
-variable.  The HTTP_PROXY environment variable should not be trusted
-by a program running in a CGI-like environment.
-
-Mitigation in lighttpd <= 1.4.40 is to reject requests w/ Proxy header:
-
-* Create "/path/to/deny-proxy.lua", read-only to lighttpd, with content:
-  if (lighty.request["Proxy"] == nil) then return 0 else return 403 end
-* Modify lighttpd.conf to load mod_magnet and run lua code
-    server.modules += ( "mod_magnet" )
-    magnet.attract-raw-url-to = ( "/path/to/deny-proxy.lua" )
-
-References:
-
-https://www.kb.cert.org/vuls/id/797896
-CGI web servers assign Proxy header values from client requests to
-internal HTTP_PROXY environment variables
-
-https://httpoxy.org/
-httpoxy: A CGI application vulnerability
----
- src/mod_cgi.c     | 7 +++++++
- src/mod_fastcgi.c | 7 +++++++
- src/mod_proxy.c   | 4 ++++
- src/mod_scgi.c    | 7 +++++++
- src/mod_ssi.c     | 9 ++++++++-
- 5 files changed, 33 insertions(+), 1 deletion(-)
-
---- a/src/mod_cgi.c
-+++ b/src/mod_cgi.c
-@@ -1041,6 +1041,13 @@ static int cgi_create_env(server *srv, c
- 			ds = (data_string *)con->request.headers->data[n];
- 
- 			if (!buffer_is_empty(ds->value) && !buffer_is_empty(ds->key)) {
-+				/* Do not emit HTTP_PROXY in environment.
-+				 * Some executables use HTTP_PROXY to configure
-+				 * outgoing proxy.  See also https://httpoxy.org/ */
-+				if (buffer_is_equal_caseless_string(ds->key, CONST_STR_LEN("Proxy"))) {
-+					continue;
-+				}
-+
- 				buffer_copy_string_encoded_cgi_varnames(p->tmp_buf, CONST_BUF_LEN(ds->key), 1);
- 
- 				cgi_env_add(&env, CONST_BUF_LEN(p->tmp_buf), CONST_BUF_LEN(ds->value));
---- a/src/mod_fastcgi.c
-+++ b/src/mod_fastcgi.c
-@@ -1774,6 +1774,13 @@ static int fcgi_env_add_request_headers(
- 		ds = (data_string *)con->request.headers->data[i];
- 
- 		if (!buffer_is_empty(ds->value) && !buffer_is_empty(ds->key)) {
-+			/* Do not emit HTTP_PROXY in environment.
-+			 * Some executables use HTTP_PROXY to configure
-+			 * outgoing proxy.  See also https://httpoxy.org/ */
-+			if (buffer_is_equal_caseless_string(ds->key, CONST_STR_LEN("Proxy"))) {
-+				continue;
-+			}
-+
- 			buffer_copy_string_encoded_cgi_varnames(srv->tmp_buf, CONST_BUF_LEN(ds->key), 1);
- 
- 			FCGI_ENV_ADD_CHECK(fcgi_env_add(p->fcgi_env, CONST_BUF_LEN(srv->tmp_buf), CONST_BUF_LEN(ds->value)),con);
---- a/src/mod_proxy.c
-+++ b/src/mod_proxy.c
-@@ -492,6 +492,10 @@ static int proxy_create_env(server *srv,
- 		if (!buffer_is_empty(ds->value) && !buffer_is_empty(ds->key)) {
- 			if (buffer_is_equal_string(ds->key, CONST_STR_LEN("Connection"))) continue;
- 			if (buffer_is_equal_string(ds->key, CONST_STR_LEN("Proxy-Connection"))) continue;
-+			/* Do not emit HTTP_PROXY in environment.
-+			 * Some executables use HTTP_PROXY to configure
-+			 * outgoing proxy.  See also https://httpoxy.org/ */
-+			if (buffer_is_equal_caseless_string(ds->key, CONST_STR_LEN("Proxy"))) continue;
- 
- 			buffer_append_string_buffer(b, ds->key);
- 			buffer_append_string_len(b, CONST_STR_LEN(": "));
---- a/src/mod_scgi.c
-+++ b/src/mod_scgi.c
-@@ -1424,6 +1424,13 @@ static int scgi_env_add_request_headers(
- 		ds = (data_string *)con->request.headers->data[i];
- 
- 		if (!buffer_is_empty(ds->value) && !buffer_is_empty(ds->key)) {
-+			/* Do not emit HTTP_PROXY in environment.
-+			 * Some executables use HTTP_PROXY to configure
-+			 * outgoing proxy.  See also https://httpoxy.org/ */
-+			if (buffer_is_equal_caseless_string(ds->key, CONST_STR_LEN("Proxy"))) {
-+				continue;
-+			}
-+
- 			buffer_copy_string_encoded_cgi_varnames(srv->tmp_buf, CONST_BUF_LEN(ds->key), 1);
- 
- 			scgi_env_add(p->scgi_env, CONST_BUF_LEN(srv->tmp_buf), CONST_BUF_LEN(ds->value));
---- a/src/mod_ssi.c
-+++ b/src/mod_ssi.c
-@@ -177,7 +177,14 @@ static int ssi_env_add_request_headers(s
- 
- 		if (!buffer_is_empty(ds->value) && !buffer_is_empty(ds->key)) {
- 			/* don't forward the Authorization: Header */
--			if (0 == strcasecmp(ds->key->ptr, "AUTHORIZATION")) {
-+			if (buffer_is_equal_caseless_string(ds->key, CONST_STR_LEN("Authorization"))) {
-+				continue;
-+			}
-+
-+			/* Do not emit HTTP_PROXY in environment.
-+			 * Some executables use HTTP_PROXY to configure
-+			 * outgoing proxy.  See also https://httpoxy.org/ */
-+			if (buffer_is_equal_caseless_string(ds->key, CONST_STR_LEN("Proxy"))) {
- 				continue;
- 			}
- 
